/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Utilerias;
import ClasesDAO.accesoSistema;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import conexion.conex;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

import org.apache.xerces.parsers.DOMParser;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
/**
 *
 * @author desarrollo8
 */
public class LectorXML extends javax.swing.JFrame {

    /**
     * Creates new form LectorXML
     */
    public LectorXML() {
        initComponents();
        jtproductos.getColumnModel().getColumn(0).setMaxWidth(480);
        jtproductos.getColumnModel().getColumn(0).setMinWidth(480);
        jtproductos.getColumnModel().getColumn(0).setPreferredWidth(480);
        jtproductos.getColumnModel().getColumn(0).setWidth(480);
        
        jtproductos.getColumnModel().getColumn(4).setMaxWidth(0);
        jtproductos.getColumnModel().getColumn(4).setMinWidth(0);
        jtproductos.getColumnModel().getColumn(4).setPreferredWidth(0);
        jtproductos.getColumnModel().getColumn(4).setWidth(0);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        txtruta = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtproductos = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Generador de Documento PDF");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Seleccionar el XML del sat para cargar los productos.");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Configuracion.png"))); // NOI18N
        jButton1.setText("Cargar XML");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buscar.png"))); // NOI18N
        jButton2.setText("Buscar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        txtruta.setEditable(false);
        txtruta.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtruta.setEnabled(false);

        jtproductos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jtproductos.getTableHeader().setReorderingAllowed(false) ;
        jtproductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Producto", "Cantidad", "Precio", "Total", "IdProd", "Existe"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtproductos.setRowHeight(18);
        jScrollPane1.setViewportView(jtproductos);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/mas.png"))); // NOI18N
        jButton3.setText("Guardar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtruta, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtruta, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String ops="";
        String ruta=txtruta.getText().trim();
        String domicilio="";
        if(ruta.equals("")){
            JOptionPane.showMessageDialog(null, "Debe seleccionar un archivo xml para poder cargar al sistema", "Alerta", JOptionPane.ERROR_MESSAGE);
            txtruta.requestFocus();
        }else{
            
        
        
        //OBTENEMOS LOS DATOS DEL XML
        ArrayList conceptos=obtenfolio(ruta);
        //FIN DE LECTURA XML
                        
        
        String factura="",fechaGeneracion="",FechaTimbrado="",costoletra="",montostr="",ivatotal="",total="",uuid="",noCertificadoSAT="",selloCFD="",selloSAT="",cadenacomplemento="",cliente="",tipopagos="",rfccliente="",callereceptor="",cpreceptor="",ciudadreceptor="",coloniareceptor="",estadoreceptor="",uso_cfdi="",NoCertificado="", moneda="USD";
        String formapago="",serie="";
        for(int x=0;x<conceptos.size();x++) {
            if(x==0){
            uuid=conceptos.get(x)+"";
            }
            if(x==1){
            FechaTimbrado=conceptos.get(x)+"";
            }
            if(x==2){
            selloCFD=conceptos.get(x)+"";
            }
            if(x==3){
            noCertificadoSAT=conceptos.get(x)+"";
            }
            if(x==4){
            selloSAT=conceptos.get(x)+"";
            }
            if(x==5){//folio
            factura=conceptos.get(x)+"";
            }
            if(x==6){//NoCertificado
            NoCertificado=conceptos.get(x)+"";
            }
            if(x==7){//formapago
            formapago=conceptos.get(x)+"";
              if(formapago.equals("01")){
                  formapago="01 - Efectivo";
              }
              if(formapago.equals("02")){
                  formapago="02 - Cheque nominativo";
              }
              if(formapago.equals("03")){
                  formapago="03 - Transferencia electrónica de fondos";
              }
              if(formapago.equals("04")){
                  formapago="04 - Tarjeta de crédito";
              }
              if(formapago.equals("28")){
                  formapago="28 - Tarjeta de débito";
              }
              if(formapago.equals("99")){
                  formapago="99 - Por definir";
              }
            }
            if(x==8){//Fecha
            fechaGeneracion=conceptos.get(x)+"";
            }
            if(x==9){//total
            total=conceptos.get(x)+"";
            }
            if(x==10){//subtotal
            montostr=conceptos.get(x)+"";
            }
            if(x==11){//metodo pago
            tipopagos=conceptos.get(x)+"";
                if(tipopagos.equals("PPD")){
                  tipopagos="PPD - Pago en parcialidades o diferido";
                }
                if(tipopagos.equals("PUE")){
                  tipopagos="PUE - Pago en una sola exhibición";
                }
                if(tipopagos.equals("PIP")){
                  tipopagos="PIP - Pago inicial y parcialidades";
                }
            }
            
            if(x==12){//serie
            serie=conceptos.get(x)+"";
            }
            
            
            if(x==13){//RFCRECEPTOR
            rfccliente=conceptos.get(x)+"";
                //System.out.println("rfccliente:"+rfccliente);
            }
            if(x==14){//NOMBRERECEPTOR
            cliente=conceptos.get(x)+"";
            }
            
           
            
            
            if(x==15){//USOCFDI
            uso_cfdi=conceptos.get(x)+"";
                if(uso_cfdi.equals("G01")){
                  uso_cfdi="G01 - Adquisición de mercancias";
                }
                if(uso_cfdi.equals("G02")){
                  uso_cfdi="G02 - Devoluciones, descuentos o bonificaciones";
                }
                if(uso_cfdi.equals("G03")){
                  uso_cfdi="G03 - Gastos en general";
                }
                if(uso_cfdi.equals("P01")){
                  uso_cfdi="P01 - Por definir";
                }
            }
            if(x==16){//ivas
            ivatotal=conceptos.get(x)+"";
            }
            
            if(x==17){//moneda
            moneda=conceptos.get(x)+"";
            }
            
            //System.out.println("conceptos.get(x): "+conceptos.get(x));
          }
        
        
        
        //####FUNCION PARA GENERAR EL CODIGO DE BARRAS
        String patharchivos=new File ("").getAbsolutePath ()+"\\";
        String rfcEmisor_="";
        Genera_CodigoQR(factura, rfcEmisor_, rfccliente, total, patharchivos,ruta);
        //FIN GENERAR EL CODIGO DE BARRAS
        
        
        //#####OBTIENE EL COSTO EN LETRAS
        String enteros="",decimal="",enterosAdd="",decimalAdd="";        
        costoletra=costoletra+" "+decimal+"/100 "+moneda;
        //FIN COSTO EN LETRAS
        
        //cadena complemento
        cadenacomplemento=cadenaoriginalsat(uuid,FechaTimbrado,noCertificadoSAT,ruta);
        
        
        //REINICIA LOS CAMPOS
      
        txtruta.setText("");
      
        }
         
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        //Crear un objeto FileChooser
        String patharchivos=new File ("").getAbsolutePath ()+"\\";
        JFileChooser fc = new JFileChooser(patharchivos);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("xml files (*.xml)", "xml");
        fc.setFileFilter(filter);
        //Mostrar la ventana para abrir archivo y recoger la respuesta
        //En el parámetro del showOpenDialog se indica la ventana
        //  al que estará asociado. Con el valor this se asocia a la
        //  ventana que la abre.
        int respuesta = fc.showOpenDialog(this);
        //Comprobar si se ha pulsado Aceptar
        if (respuesta == JFileChooser.APPROVE_OPTION)
        {
            //Crear un objeto File con el archivo elegido
            File archivoElegido = fc.getSelectedFile();
            //Mostrar el nombre del archvivo en un campo de texto
            txtruta.setText(archivoElegido.getName());

            txtruta.setText(archivoElegido.getAbsolutePath());
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int numprod=jtproductos.getRowCount();
        if(numprod>0){
            for(int fila=0; fila<jtproductos.getRowCount(); fila++){
               String cantidad=jtproductos.getValueAt(fila, 1).toString();
               String idprod=jtproductos.getValueAt(fila, 4).toString();  
               if(idprod.equals("0")){
               }else{
                    conex con=new conex();
                     try {
                         String myQuery = "update tc_productos set existencia=existencia-'"+cantidad+"' where idproducto='"+idprod+"'";
                         System.out.println(""+myQuery);
                         Statement st = con.getConnection().createStatement();
                         st.executeUpdate(myQuery);
                         myQuery = "insert into th_inventarios_registrados (id_producto,cantidad_agregada,fecha,usuario_ajusto,tipo_mov) values ('"+idprod+"','"+cantidad+"',now(),'"+accesoSistema.nombreuser+" CARGA XML','SALIDA')";            
                         System.out.println(""+myQuery);
                         st.executeUpdate(myQuery);
                         st.close();
                         con.desconectar();                                        
                     } catch (SQLException ex) {
                         JOptionPane.showMessageDialog(null, "Error al registrar el inventario: "+ex, "Error", JOptionPane.ERROR_MESSAGE);
                     }
               }
       }
       vaciartabla();
       JOptionPane.showMessageDialog(null, "Se realizo la salida del inventario de los productos correctamente. ", "Inventario actualizado", JOptionPane.PLAIN_MESSAGE);
        }else{
            JOptionPane.showMessageDialog(null, "No hay productos en la venta. ", "Error al registrar venta", JOptionPane.ERROR_MESSAGE);        
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LectorXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LectorXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LectorXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LectorXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LectorXML().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtproductos;
    private javax.swing.JTextField txtruta;
    // End of variables declaration//GEN-END:variables


private ArrayList Genera_CodigoQR(String noFactura, String rfcEmisor, String rfcRecetor, String totalAmout,String patharchivos,String direccionarchivo) {
        ArrayList conceptos=new ArrayList();
        //INICIA OBTENER DATOS DEL ARCHIVO XML GENERADO CON EL WEB SERVICE DE INVOICE ONE
        String total=totalAmout,  rfc_emosor=rfcEmisor, rfc_receptor=rfcRecetor;
        String FechaTimbrado="", UUID="", selloCFD="", noCertificadoSAT="", selloSAT="";
        
                String rutaimagen=patharchivos+"facturas_xml\\"+noFactura+".png";
                String sFichero = direccionarchivo; //ruata de archivos para produccion
                //System.out.println("ruta xml: "+sFichero);
                String Sello="";
                File fichero = new File(sFichero);
                if (fichero.exists()){
                                    // Creamos el parseador  
                                    DOMParser parser = new DOMParser();  
                                                 try {
                                                     // Procesamos el fichero XML                                                      
                                                     parser.parse(new InputSource(new FileInputStream(sFichero)));
                                                 } catch (SAXException ex) {                                                    
                                                 } catch (IOException ex) {
                                                        Logger.getLogger(LectorXML.class.getName()).log(Level.SEVERE, null, ex);
                                                 }
                                    // Obtenemos el objeto Document  
                                    Document doc = parser.getDocument(); 
                                    // Obtenemos la etiqueta raiz                                   


                                        NodeList listaNodosNS = doc.getElementsByTagNameNS("http://www.sat.gob.mx/TimbreFiscalDigital","TimbreFiscalDigital");  
                                        for(int i=0;i<listaNodosNS.getLength();i++){  
                                           Node nodo = listaNodosNS.item(i); 
                                           //System.out.println(listaNodosNS.item(i));
                                           if (nodo instanceof Element){                                                
                                              UUID= nodo.getAttributes().getNamedItem("UUID").getTextContent()+"";
                                              conceptos.add(UUID);
                                              //System.out.println("UUID: "+UUID);
                                              FechaTimbrado=nodo.getAttributes().getNamedItem("FechaTimbrado").getTextContent();                                              
                                              conceptos.add(FechaTimbrado);
                                              selloCFD=nodo.getAttributes().getNamedItem("SelloCFD").getTextContent();
                                              conceptos.add(selloCFD);
                                              noCertificadoSAT=nodo.getAttributes().getNamedItem("NoCertificadoSAT").getTextContent();
                                              conceptos.add(noCertificadoSAT);
                                              selloSAT=nodo.getAttributes().getNamedItem("SelloSAT").getTextContent();
                                              conceptos.add(selloSAT);
                                           }                         
                                        }   
                                        
                                        
                                        //nodo comprobante
                                        String folio="",NoCertificado="",FormaPago="",Fecha="",SubTotal="",MetodoPago="";
                                        listaNodosNS = doc.getElementsByTagNameNS("http://www.sat.gob.mx/cfd/3","Comprobante");  
                                        for(int i=0;i<listaNodosNS.getLength();i++){  
                                           Node nodo = listaNodosNS.item(i); 
                                           //System.out.println(listaNodosNS.item(i));
                                           if (nodo instanceof Element){                                                
                                              folio= nodo.getAttributes().getNamedItem("Folio").getTextContent()+"";
                                              conceptos.add(folio);
                                              NoCertificado= nodo.getAttributes().getNamedItem("NoCertificado").getTextContent()+"";
                                              conceptos.add(NoCertificado);
                                              FormaPago= nodo.getAttributes().getNamedItem("FormaPago").getTextContent()+"";
                                              conceptos.add(FormaPago);
                                              Fecha= nodo.getAttributes().getNamedItem("Fecha").getTextContent()+"";
                                              conceptos.add(Fecha);
                                              total= nodo.getAttributes().getNamedItem("Total").getTextContent()+"";
                                              conceptos.add(total);
                                              SubTotal= nodo.getAttributes().getNamedItem("SubTotal").getTextContent()+"";
                                              conceptos.add(SubTotal);
                                              MetodoPago= nodo.getAttributes().getNamedItem("MetodoPago").getTextContent()+"";
                                              conceptos.add(MetodoPago);                                                
                                              Sello= nodo.getAttributes().getNamedItem("Sello").getTextContent()+"";
                                              //conceptos.add(Sello); 
                                              
                                           }                         
                                        }   
                                        
                                        NodeList receptorNlc = doc.getElementsByTagName("cfdi:Receptor");
                                        Element rfcR_Elements = (Element)receptorNlc.item(0);
                                        String rfcreceptor = rfcR_Elements.getAttribute("Rfc");
                                         conceptos.add(rfcreceptor);
                                        String nombrereceptor=rfcR_Elements.getAttribute("Nombre");
                                         conceptos.add(nombrereceptor);
                                        String UsoCFDI=rfcR_Elements.getAttribute("UsoCFDI");
                                         conceptos.add(UsoCFDI);
                                         
                                        NodeList impuesto = doc.getElementsByTagName("cfdi:Impuestos");
                                        int totaless=impuesto.getLength();                                        
                                        Element ivasss = (Element)impuesto.item(totaless-1);
                                        String iva = ivasss.getAttribute("TotalImpuestosTrasladados");
                                        conceptos.add(iva);      
                                        
                                        NodeList conceptoss = doc.getElementsByTagName("cfdi:Concepto");
                                        int totalconcepto=conceptoss.getLength();     
                                        //System.out.println("totalconcepto: "+totalconcepto);   
                                        int folioss=Integer.parseInt(folio); 
                                        vaciartabla();
                                        DefaultTableModel modelo=(DefaultTableModel) jtproductos.getModel();  
                                        for(int x=0;x<totalconcepto;x++){
                                            Element concep = (Element)conceptoss.item(x);                                            
                                            String Cantidad = concep.getAttribute("Cantidad");
                                            int cantidadf=Integer.parseInt(Cantidad);
                                            String Unidad = concep.getAttribute("Unidad");                                            
                                            String ClaveUnidad = concep.getAttribute("ClaveUnidad");
                                            String Descripcion = concep.getAttribute("Descripcion");
                                            String ClaveProdServ = concep.getAttribute("ClaveProdServ");
                                            String ValorUnitario = concep.getAttribute("ValorUnitario");
                                            Float ValorUnitariof=Float.parseFloat(ValorUnitario);
                                            String Importe = concep.getAttribute("Importe");
                                            Float Importef=Float.parseFloat(Importe);
                                            int existeprod=existeprod(Descripcion);
                                            String existe="NO";
                                            if(existeprod!=0){//SI ES¿XISTE EL PRODUCTO
                                                existe="SI";
                                            }
                                            modelo.addRow(new Object[]{Descripcion,Cantidad,ValorUnitariof+"",Importef,existeprod,existe});                        
                                            //BDFactura.insertar(folioss, cantidadf, Unidad, ClaveUnidad, Descripcion, ClaveProdServ, ValorUnitariof, Importef);                                        
                                            System.out.println("ValorUnitariof: "+ValorUnitariof+" importe "+Importef);
                                        }
                                        
                                       
                                        
                                        
                                 }//FIN DE VALIDACION DE FICHERO
        //TERMINA OBTENR DATOS DEL ARCHIVO XML GENERADO CON EL WEB SERVICE DE INVOICE ONE
                
        
        //INICIA AGREAGAR ESTRUCTURA DE MONTO TOTAL PARA CFDI A MOSTRAR EN EL CODIGO QR
        int error=0;
        String montoTotal="", enteros="", decimal="", enterosAdd="", decimalAdd=""; 

        montoTotal=total;
        StringTokenizer tokens=new StringTokenizer(montoTotal,".");
        while(tokens.hasMoreTokens()){
                enteros=tokens.nextToken();
                decimal=tokens.nextToken();
        }

        if(enteros.length()<10){
                for(int i=enteros.length();i<10;i++){
                        enterosAdd=enterosAdd+"0";
                }
                enterosAdd = enterosAdd+enteros;
        }else if(enteros.length()>10){
                error=1;
        }

        if(decimal.length()<6){
                for(int i=decimal.length();i<6;i++){
                        decimalAdd=decimalAdd+"0";
                }
                decimalAdd=decimal+decimalAdd;
        }else if(decimal.length()>6){
                for (int i=0;i<decimal.length();i++){
                        if(i<6){
                                decimalAdd=decimalAdd+decimal.charAt(i);
                        }
                }	   
        }

        if(error==1){
                System.out.println("Error en la generación de QR Code");
        }else{
                //System.out.println("Resul: "+enterosAdd+" . "+decimalAdd);
        }
        //TERMINA AGREGAR ESTRUCTURA DE MONTO TOTAL PARA CFDI A MOSTRAR EN EL CODIGO QR       
        int totlen=Sello.length();
        int tos1=totlen-8;
        String ulitmosdigsello=Sello.substring(tos1,totlen);
        //System.out.println("ulitmosdigsello: "+ulitmosdigsello);
        String qrCodeData = "https://verificacfdi.facturaelectronica.sat.gob.mx/default.aspx?&id="+UUID+"&re="+rfc_emosor+"&rr="+rfc_receptor+"&tt="+enterosAdd+"."+decimalAdd+"&fe="+ulitmosdigsello;       
        String filePath = rutaimagen; 
        String charset = "UTF-8"; // or "ISO-8859-1"
        Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<EncodeHintType, ErrorCorrectionLevel>();
        hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);

        /*
        try {
            createQRCode(qrCodeData, filePath, charset, hintMap, 120, 120);
        } catch (IOException ex) {
            Logger.getLogger(LectorXML.class.getName()).log(Level.SEVERE, null, ex);
        } catch (WriterException ex) {
            Logger.getLogger(LectorXML.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        return conceptos;
    }
    
    public static void createQRCode(String qrCodeData, String filePath, String charset, Map hintMap, int qrCodeheight, int qrCodewidth) throws IOException, WriterException{
        BitMatrix matrix = new MultiFormatWriter().encode(new String(qrCodeData.getBytes(charset), charset),BarcodeFormat.QR_CODE, qrCodewidth, qrCodeheight, hintMap);
        MatrixToImageWriter.writeToFile(matrix, filePath.substring(filePath.lastIndexOf('.') + 1), new File(filePath));
        //System.out.println("Si entro...");
    }

    
    
    public ArrayList obtenfolio(String rutaarchivo){                
                ArrayList conceptos=new ArrayList();
                String sFichero = rutaarchivo; //ruata de archivos para produccion
                String total="",  rfc_emosor="", rfc_receptor="";
                String FechaTimbrado="", UUID="", selloCFD="", noCertificadoSAT="", selloSAT="";
                //System.out.println("ruta xml: "+sFichero);
                File fichero = new File(sFichero);
                if (fichero.exists()){
                                    // Creamos el parseador  
                                    DOMParser parser = new DOMParser();  
                                                 try {
                                                     // Procesamos el fichero XML                                                      
                                                     parser.parse(new InputSource(new FileInputStream(sFichero)));
                                                 } catch (SAXException ex) {                                                    
                                                 } catch (IOException ex) {
                                                        Logger.getLogger(LectorXML.class.getName()).log(Level.SEVERE, null, ex);
                                                 }
                                    // Obtenemos el objeto Document  
                                    Document doc = parser.getDocument(); 
                                    // Obtenemos la etiqueta raiz                                   


                                        NodeList listaNodosNS = doc.getElementsByTagNameNS("http://www.sat.gob.mx/TimbreFiscalDigital","TimbreFiscalDigital");  
                                        for(int i=0;i<listaNodosNS.getLength();i++){  
                                           Node nodo = listaNodosNS.item(i); 
                                           //System.out.println(listaNodosNS.item(i));
                                           if (nodo instanceof Element){                                                
                                              UUID= nodo.getAttributes().getNamedItem("UUID").getTextContent()+"";
                                              conceptos.add(UUID);
                                              //System.out.println("UUID: "+UUID);
                                              FechaTimbrado=nodo.getAttributes().getNamedItem("FechaTimbrado").getTextContent();                                              
                                              conceptos.add(FechaTimbrado);
                                              selloCFD=nodo.getAttributes().getNamedItem("SelloCFD").getTextContent();
                                              conceptos.add(selloCFD);
                                              noCertificadoSAT=nodo.getAttributes().getNamedItem("NoCertificadoSAT").getTextContent();
                                              conceptos.add(noCertificadoSAT);
                                              selloSAT=nodo.getAttributes().getNamedItem("SelloSAT").getTextContent();
                                              conceptos.add(selloSAT);
                                           }                         
                                        }   
                                        
                                        
                                        //nodo comprobante
                                        String folio="",NoCertificado="",FormaPago="",Fecha="",SubTotal="",MetodoPago="";
                                        String serie="",moneda="";
                                        listaNodosNS = doc.getElementsByTagNameNS("http://www.sat.gob.mx/cfd/3","Comprobante");  
                                        for(int i=0;i<listaNodosNS.getLength();i++){  
                                           Node nodo = listaNodosNS.item(i); 
                                           //System.out.println(listaNodosNS.item(i));
                                           if (nodo instanceof Element){                                                
                                              folio= nodo.getAttributes().getNamedItem("Folio").getTextContent()+"";
                                              conceptos.add(folio);
                                              NoCertificado= nodo.getAttributes().getNamedItem("NoCertificado").getTextContent()+"";
                                              conceptos.add(NoCertificado);
                                              FormaPago= nodo.getAttributes().getNamedItem("FormaPago").getTextContent()+"";
                                              conceptos.add(FormaPago);
                                              Fecha= nodo.getAttributes().getNamedItem("Fecha").getTextContent()+"";
                                              conceptos.add(Fecha);
                                              total= nodo.getAttributes().getNamedItem("Total").getTextContent()+"";
                                              conceptos.add(total);
                                              SubTotal= nodo.getAttributes().getNamedItem("SubTotal").getTextContent()+"";
                                              conceptos.add(SubTotal);
                                              MetodoPago= nodo.getAttributes().getNamedItem("MetodoPago").getTextContent()+"";
                                              conceptos.add(MetodoPago);
                                              //serie= nodo.getAttributes().getNamedItem("Serie").getTextContent()+"";
                                              //conceptos.add(serie);
                                              //moneda= nodo.getAttributes().getNamedItem("Moneda").getTextContent()+"";
                                              //System.out.println("SubTotal: "+SubTotal);                                             
                                           }                         
                                        }   
                                        
                                        NodeList receptorNlc = doc.getElementsByTagName("cfdi:Receptor");
                                        Element rfcR_Elements = (Element)receptorNlc.item(0);
                                        String rfcreceptor = rfcR_Elements.getAttribute("Rfc");
                                         conceptos.add(rfcreceptor);
                                        String nombrereceptor=rfcR_Elements.getAttribute("Nombre");
                                         conceptos.add(nombrereceptor);
                                        String UsoCFDI=rfcR_Elements.getAttribute("UsoCFDI");
                                         conceptos.add(UsoCFDI);
                                         
                                        NodeList impuesto = doc.getElementsByTagName("cfdi:Impuestos");
                                        int totaless=impuesto.getLength();
                                        //System.out.println("totaless: "+totaless);
                                        Element ivasss = (Element)impuesto.item(totaless-1);
                                        String iva = ivasss.getAttribute("TotalImpuestosTrasladados");
                                        conceptos.add(iva);
                                        //System.out.println("iva: "+iva); 
                                        
                                        conceptos.add(moneda);
                                        
                                 }//FIN DE VALIDACION DE FICHERO
    return conceptos;
    
    }


public String cadenaoriginalsat(String uuid,String FechaTimbrado,String noCertificadoSAT,String sFichero){
String cadena="";

String sello="";
 DOMParser parser = new DOMParser();  
 try {
     // Procesamos el fichero XML                                                      
     parser.parse(new InputSource(new FileInputStream(sFichero)));
 } catch (SAXException ex) {                                                    
 } catch (IOException ex) {
        Logger.getLogger(LectorXML.class.getName()).log(Level.SEVERE, null, ex);
 }
// Obtenemos el objeto Document  
Document doc = parser.getDocument(); 
NodeList listaNodosNS = doc.getElementsByTagNameNS("http://www.sat.gob.mx/cfd/3","Comprobante");  
for(int i=0;i<listaNodosNS.getLength();i++){  
   Node nodo = listaNodosNS.item(i); 
   //System.out.println(listaNodosNS.item(i));
   if (nodo instanceof Element){                                                
      sello= nodo.getAttributes().getNamedItem("Sello").getTextContent()+"";                                                  
   }                         
}   
String version="",RfcProvCertif="";
listaNodosNS = doc.getElementsByTagNameNS("http://www.sat.gob.mx/TimbreFiscalDigital","TimbreFiscalDigital");  
for(int i=0;i<listaNodosNS.getLength();i++){  
   Node nodo = listaNodosNS.item(i); 
   //System.out.println(listaNodosNS.item(i));
   if (nodo instanceof Element){                                                
      version= nodo.getAttributes().getNamedItem("Version").getTextContent()+"";    
      RfcProvCertif= nodo.getAttributes().getNamedItem("RfcProvCertif").getTextContent()+"";    
   }                         
}  

cadena="||"+version+"|"+uuid+"|"+FechaTimbrado+"|"+RfcProvCertif+"|"+sello+"|"+noCertificadoSAT+"||";
return cadena;
}    

 public void vaciartabla(){
            DefaultTableModel modelo=(DefaultTableModel) jtproductos.getModel();         
            for (int i = 0; i < jtproductos.getRowCount(); i++) {
                modelo.removeRow(i);
                i-=1;
            }    
    }

 public int existeprod(String nombreprod){
     int existe=0;
        conex con=new conex();   
        ResultSet rsR = null;        
        String myQuery = "select idproducto from tc_productos where nombre_producto='"+nombreprod+"'";
               //System.out.println(""+myQuery);
               try {
                   Statement st = con.getConnection().createStatement();
                   rsR = st.executeQuery(myQuery);
                   if(rsR.next()) {                                                
                       existe=rsR.getInt("idproducto");
                   }                   
                   rsR.close(); 
                   st.close();
                   con.desconectar();
               } catch (SQLException ex) {                         
                   JOptionPane.showMessageDialog(null, "Error al obtener los datos: "+ex, "Error", JOptionPane.ERROR_MESSAGE);
               }     
    return existe;
 }
 
}
