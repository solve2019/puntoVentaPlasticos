/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Restaurant;

import conexion.conex;
import java.awt.Component;
import java.beans.PropertyVetoException;
import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import puntoventa.PantallaPrincipal;

/**
 *
 * @author desarrollo8
 */
public class Comandera extends javax.swing.JInternalFrame {

    /**
     * Creates new form Comandera
     */
    public Comandera() {
        initComponents();
        cargartabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtmesas = new javax.swing.JTable();

        jtmesas.setDefaultRenderer(Object.class,new IconCellRenderer());
        jtmesas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtmesas.setCellSelectionEnabled(true);
        jtmesas.setRowHeight(100);
        jtmesas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jtmesas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtmesasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtmesas);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 725, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtmesasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtmesasMouseClicked
        // TODO add your handling code here:
        
         if(evt.getClickCount()==1){
             int columna=jtmesas.getSelectedColumn();
             int fila=jtmesas.getSelectedRow();
             if(columna>=0){
             //System.out.println("ubicacion: "+fila+" "+columna);
                 //String dato=String.valueOf(jtmesas.getValueAt(jtmesas.getSelectedRow(),0));
                 //System.out.println("Se ha hecho un click: "+dato);
                 int numeroreg=fila*5;
                 int mesa=numeroreg+columna;
                 System.out.println("no registro: "+mesa);
                 String idmesa=obtenidmesa(mesa); //obtiene el id de la mesa
                 String nombremesa=obtenmesa(mesa); //obtiene el id de la mesa
                 System.out.println("NOMBRE MESA:"+nombremesa);
                 
                   if(!nombremesa.equals("")){
                    PantallaPrincipal.escritorio.removeAll();
                    AddProductos v1=new AddProductos(idmesa,nombremesa);                
                    v1.setResizable(true);
                    v1.setClosable(true);
                    PantallaPrincipal.escritorio.add(v1);
                    v1.show();
                    //extiende al maximo la jinternal frame
                    try {
                        v1.setMaximum(true);
                    } catch (PropertyVetoException ex) {
                        
                    }
                   }

               }
        }
    }//GEN-LAST:event_jtmesasMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtmesas;
    // End of variables declaration//GEN-END:variables

    public void vaciartabla(){
            DefaultTableModel modelo=(DefaultTableModel) jtmesas.getModel();         
            for (int i = 0; i < jtmesas.getRowCount(); i++) {
                modelo.removeRow(i);
                i-=1;
            }    
    }
    public void cargartabla(){    
        vaciartabla();
        
        /*ImageIcon libre = new ImageIcon(getClass().getResource("/Restaurant/img/libre.jpg")); 
        ImageIcon ocupado = new ImageIcon(getClass().getResource("/Restaurant/img/ocupado.jpg")); 
        DefaultTableModel modelo=(DefaultTableModel) jtmesas.getModel();  
        JLabel lbactivo=new JLabel(libre);
        lbactivo.setText("01-L");
        JLabel lbinactivo=new JLabel(ocupado);
        lbinactivo.setText("99-O");
        
        modelo.addRow(new Object[]{lbactivo,lbinactivo,lbactivo,lbactivo,lbinactivo,lbactivo,lbactivo});    
        modelo.addRow(new Object[]{lbactivo,lbactivo,lbactivo,lbactivo,lbinactivo,lbactivo,lbactivo});            
        modelo.addRow(new Object[]{lbinactivo,lbactivo,lbactivo,lbactivo,lbinactivo,lbactivo,lbinactivo});    
        modelo.addRow(new Object[]{lbactivo,lbinactivo,lbactivo,lbactivo,lbactivo,lbinactivo,lbactivo});    
        modelo.addRow(new Object[]{lbactivo,lbactivo,lbactivo,lbactivo,lbinactivo,lbactivo,lbactivo});    
        */
        
        conex con=new conex();   
        ResultSet rsR = null;        
        String myQuery = "select count(Nombre) as total from rest_mesas where esteliminacion=1 ";
               //System.out.println(""+myQuery);
               try {
                   
                   Statement st = con.getConnection().createStatement();
                   rsR = st.executeQuery(myQuery);
                   int totalprod=0;
                    int contfila=1;
                   while(rsR.next()) { 
                    totalprod=rsR.getInt("total");
                   }
                   int filas=totalprod/5;
                   int residuo= totalprod%5;
                   if(residuo>0){
                   filas++;
                   }
                   
                   myQuery = "select * from rest_mesas where esteliminacion=1";
                   rsR = st.executeQuery(myQuery);
                   int i=0;
                   JLabel[] lbactivo=new JLabel[5];     
                   while(rsR.next()) {   
                       //ImageIcon libre = new ImageIcon(getClass().getResource("/Restaurant/img/libre.jpg")); 
                       //ImageIcon ocupado = new ImageIcon(getClass().getResource("/Restaurant/img/ocupado.jpg")); 
                       
                       
                       ImageIcon libre = null; 
                       ImageIcon ocupado = null; 
                       String ruta_logo=new File ("").getAbsolutePath ()+"/imagenes_configurables/libre.JPG";
                       File fichero = new File(ruta_logo);
                       if (fichero.exists()){
                           libre=new ImageIcon(ruta_logo);
                       }
                       ruta_logo=new File ("").getAbsolutePath ()+"/imagenes_configurables/ocupado.JPG";
                       fichero = new File(ruta_logo);
                       if (fichero.exists()){
                           ocupado=new ImageIcon(ruta_logo);
                       }

                       
                       
                       DefaultTableModel modelo=(DefaultTableModel) jtmesas.getModel();  
                                         
                       if(rsR.getString("estatus").equals("LIBRE")){
                            lbactivo[i]=new JLabel(libre);
                            lbactivo[i].setText(rsR.getString("Nombre")+"-L");
                       }else{
                            lbactivo[i]=new JLabel(ocupado);
                            lbactivo[i].setText(rsR.getString("Nombre")+"-O");
                       }
                       i++;
                       if(i==5){
                           contfila++;
                            i=0;
                            modelo.addRow(new Object[]{lbactivo[0],lbactivo[1],lbactivo[2],lbactivo[3],lbactivo[4]});                                               
                       }
                       
                            /*if(contfila==filas && residuo==5 && i==5){
                                System.out.println("residuo 5");
                                modelo.addRow(new Object[]{lbactivo[0],lbactivo[1],lbactivo[2],lbactivo[3],lbactivo[4],""});      
                            }*/
                            if(contfila==filas && residuo==4 && i==4){
                                System.out.println("residuo 4");
                                modelo.addRow(new Object[]{lbactivo[0],lbactivo[1],lbactivo[2],lbactivo[3],"",""});      
                            }
                            if(contfila==filas && residuo==3 && i==3){
                                System.out.println("residuo 3");
                                modelo.addRow(new Object[]{lbactivo[0],lbactivo[1],lbactivo[2],"","",""});      
                            }
                            if(contfila==filas && residuo==2 && i==2){
                                System.out.println("residuo 2");
                                modelo.addRow(new Object[]{lbactivo[0],lbactivo[1],"","","",""});      
                            }
                            System.out.println(contfila+"=="+filas+" && "+residuo+"==1 && "+i+"==1");
                            if(contfila==filas && residuo==1 && i==1){
                                System.out.println("residuo 1");
                                modelo.addRow(new Object[]{lbactivo[0],"","","","",""});      
                            }
                       
                   }                  
                   rsR.close(); 
                   st.close();
                   con.desconectar();
               } catch (SQLException ex) {       
                  
                   JOptionPane.showMessageDialog(null, "Error al obtener los datos: "+ex, "Error", JOptionPane.ERROR_MESSAGE);
               }    
              
              
    }
   

    public String obtenidmesa(int noregistro){    
       String mesa="";
        conex con=new conex();   
        ResultSet rsR = null;        
        String myQuery = "select * from rest_mesas where esteliminacion=1";
               //System.out.println(""+myQuery);
               try {
                   Statement st = con.getConnection().createStatement();
                   rsR = st.executeQuery(myQuery);
                   int i=0;                   
                   while(rsR.next()) {   
                      if(noregistro==i){
                          mesa=rsR.getString("IdMesa");
                      }
                      i++;
                   }                  
                   rsR.close(); 
                   st.close();
                   con.desconectar();
               } catch (SQLException ex) {       
                  
                   JOptionPane.showMessageDialog(null, "Error al obtener los datos: "+ex, "Error", JOptionPane.ERROR_MESSAGE);
               }    
              
           return mesa;   
    }
    
    public String obtenmesa(int noregistro){    
       String mesa="";
        conex con=new conex();   
        ResultSet rsR = null;        
        String myQuery = "select * from rest_mesas where esteliminacion=1";
               //System.out.println(""+myQuery);
               try {
                   Statement st = con.getConnection().createStatement();
                   rsR = st.executeQuery(myQuery);
                   int i=0;                   
                   while(rsR.next()) {   
                      if(noregistro==i){
                          mesa=rsR.getString("Nombre");
                      }
                      i++;
                   }                  
                   rsR.close(); 
                   st.close();
                   con.desconectar();
               } catch (SQLException ex) {       
                  
                   JOptionPane.showMessageDialog(null, "Error al obtener los datos: "+ex, "Error", JOptionPane.ERROR_MESSAGE);
               }    
              
           return mesa;   
    }
    
public class IconCellRenderer extends DefaultTableCellRenderer {

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        if (value instanceof JLabel) {
            JLabel label = (JLabel) value;
            label.setOpaque(true);
            fillColor(table, label, isSelected);
            return label;
        } else {
            return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        }
    }
    public void fillColor(JTable t, JLabel l, boolean isSelected) {
        if (isSelected) {
            l.setBackground(t.getSelectionBackground());
            l.setForeground(t.getSelectionForeground());
        } else {
            l.setBackground(t.getBackground());
            l.setForeground(t.getForeground());
        }
    }
}

}
